apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)

def key_password =  (rootProject.hasProperty("readium_sign_key_password") ? rootProject.readium_sign_key_password : "nope")
def store_password =  (rootProject.hasProperty("readium_sign_store_password") ? rootProject.readium_sign_store_password : "nope")

def lcpDir = project(':lcp').projectDir
def epub3Dir = project(':epub3').projectDir

android {
    compileSdkVersion = 26
    buildToolsVersion = "27.0.3"

    lintOptions {
        checkReleaseBuilds = false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError = false
    }

    signingConfigs {
        create("mySigningConfig") {
            //mySigningConfig {
            keyAlias = 'ReadiumAndroidAPKSign'
            keyPassword = key_password
            storePassword = store_password
            storeType "jks"
            storeFile = file('./ReadiumAndroidAPKSign.jks')
        }
    }

    defaultConfig {
        // manifest@package attribute in src/main/AndroidManifest.xml
        applicationId = "org.readium.sdk.android.launcher"

        // manifest/uses-sdk@android:minSdkVersion attribute in src/main/AndroidManifest.xml
        minSdkVersion 19

        // manifest/uses-sdk@android:targetSdkVersion attribute in src/main/AndroidManifest.xml
        targetSdkVersion 26

        // manifest@android:versionCode attribute in src/main/AndroidManifest.xml
        versionCode 31

        // manifest@android:versionName attribute in src/main/AndroidManifest.xml
        versionName "1.31"
    } //defaultConfig

    sourceSets {
        main {
            java {
                srcDirs = [
                        './src/main/java',
                        "${epub3Dir}/../lib/src/main/java",
                        "${lcpDir}/src/clientlib/java",
                        "${lcpDir}/src/contentfilter/java"
                ]
            } //java

            jniLibs {
                // dependencies {
                //     project ":epub3"
                //     project ":lcp"
                // }
                srcDirs = [
                    "${epub3Dir}/libs",
                    "${lcpDir}/libs"
                ]
            } //jniLibs
        } //main
    } //sourceSets

    buildTypes {
        debug {
            ext.enableCrashlytics = false

            minifyEnabled = false
        }
        release {
            ext.enableCrashlytics = false

            minifyEnabled = false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            //proguardFiles.add(file('proguard-rules.txt'))

            signingConfig signingConfigs.mySigningConfig
            //signingConfig $.android.signingConfigs.get("mySigningConfig")
            //signingConfig $("android.signingConfigs.mySigningConfig")
        }
    } //buildTypes

    productFlavors {
        if (!ndk_skipARM)
            "arm" {
                /*dependencies {
                    compile('org.readium.sdk.lcp:liblcp-armeabi-v7a@aar')
                }*/

                ndk.with {
                    abiFilters = ["armeabi-v7a"]
                }
            }

        if (!ndk_skipX86)
            "x86" {
                /*dependencies {
                    compile('org.readium.sdk.lcp:liblcp-x86@aar')
                }*/

                ndk.with {
                    abiFilters = ["x86"]
                }
            }
    } //productFlavors
} //android
